<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <PropertyGroup>
    <ServiceWorkerAssetsManifest>service-worker-assets.js</ServiceWorkerAssetsManifest>
    <BlazorWebAssemblyLoadAllGlobalizationData>true</BlazorWebAssemblyLoadAllGlobalizationData>
    <BlazorEnableCompression>false</BlazorEnableCompression>
    
    <!-- Configuración de versionado automático -->
    <GenerateAssemblyVersionInfo>true</GenerateAssemblyVersionInfo>
    <GenerateAssemblyFileVersionInfo>true</GenerateAssemblyFileVersionInfo>
    <GenerateAssemblyInformationalVersionAttribute>true</GenerateAssemblyInformationalVersionAttribute>
    <GenerateAssemblyConfigurationAttribute>true</GenerateAssemblyConfigurationAttribute>
  </PropertyGroup>

  <!-- Obtener información de Git -->
  <Target Name="GetGitInfo" BeforeTargets="Build">
    <Exec Command="git rev-parse --short HEAD 2>nul || echo unknown" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitHash" />
    </Exec>
    <Exec Command="git rev-parse --abbrev-ref HEAD 2>nul || echo unknown" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitBranch" />
    </Exec>
    <Exec Command="git log -1 --format=%%cd --date=format:%%Y-%%m-%%d%%20%%H:%%M:%%S 2>nul || echo $([System.DateTime]::Now.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;))" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitDate" />
    </Exec>
    <Exec Command="git describe --tags --abbrev=0 2>nul || echo v1.0.0" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitLatestTag" />
    </Exec>
    <Exec Command="git rev-list --count HEAD 2>nul || echo 0" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitCount" />
    </Exec>
    
    <!-- Limpiar valores en caso de errores -->
    <PropertyGroup>
      <GitCommitHash Condition="'$(GitCommitHash)' == '' OR $(GitCommitHash.Contains('fatal'))">unknown</GitCommitHash>
      <GitBranch Condition="'$(GitBranch)' == '' OR $(GitBranch.Contains('fatal'))">unknown</GitBranch>
      <GitCommitDate Condition="'$(GitCommitDate)' == '' OR $(GitCommitDate.Contains('fatal'))">$([System.DateTime]::Now.ToString("yyyy-MM-dd HH:mm:ss"))</GitCommitDate>
      <GitLatestTag Condition="'$(GitLatestTag)' == '' OR $(GitLatestTag.Contains('fatal'))">v1.0.0</GitLatestTag>
      <GitCommitCount Condition="'$(GitCommitCount)' == '' OR $(GitCommitCount.Contains('fatal'))">0</GitCommitCount>
      
      <!-- Crear versión informacional -->
      <AssemblyInformationalVersion>$(GitLatestTag)-$(GitCommitCount)-$(GitCommitHash)</AssemblyInformationalVersion>
      
      <!-- Generar archivo de información de versión -->
      <VersionInfoFile>$(OutputPath)version-info.json</VersionInfoFile>
    </PropertyGroup>
    
    <!-- Crear archivo JSON con información de versión -->
    <WriteLinesToFile File="wwwroot/version-info.json" 
                      Lines='{"version":"$(GitLatestTag)","build":"$(GitCommitCount)","commit":"$(GitCommitHash)","branch":"$(GitBranch)","date":"$(GitCommitDate)","buildDate":"$([System.DateTime]::Now.ToString("yyyy-MM-dd HH:mm:ss"))"}' 
                      Overwrite="true" />
                      
    <!-- Log para debug -->
    <Message Text="Git Info: Version=$(GitLatestTag), Build=$(GitCommitCount), Commit=$(GitCommitHash), Branch=$(GitBranch), Date=$(GitCommitDate)" Importance="high" />
  </Target>

  <ItemGroup>
    <PackageReference Include="DocIntel.Api.Sdk" />
    <PackageReference Include="FluentValidation" />
    <PackageReference Include="FluentValidation.DependencyInjectionExtensions" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" PrivateAssets="all" />
    <PackageReference Include="Microsoft.AspNetCore.Localization" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="Microsoft.Extensions.Http" />
    <PackageReference Include="Microsoft.Extensions.Http.Resilience" />
    <PackageReference Include="MudBlazor" />
    <PackageReference Include="Refit" />
    <PackageReference Include="Refit.HttpClientFactory" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Authentication" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Gastos.Shared\Gastos.Shared.csproj" />
  </ItemGroup>

  <ItemGroup>
    <ServiceWorker Include="wwwroot\service-worker.js" PublishedContent="wwwroot\service-worker.published.js" />
  </ItemGroup>

  <!-- Asegurar que los archivos de configuración se incluyan en el publish -->
  <ItemGroup>
    <None Include="wwwroot\staticwebapp.config.json" />
    <None Include="wwwroot\web.config" />
    <None Include="wwwroot\.htaccess" />
    <None Include="wwwroot\version-info.json" />
  </ItemGroup>

</Project>

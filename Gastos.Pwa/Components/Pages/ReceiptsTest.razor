@page "/receipts-test"
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject INetworkStatusService NetworkService
@implements IAsyncDisposable

<PageTitle>Recibos - Registro de Compras PWA</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-4">
        <MudIcon Icon="Icons.Material.Filled.Receipt" Class="mr-2" />
        Recibos de Compra
        @if (!isOnline)
        {
            <MudChip T="string" Icon="Icons.Material.Filled.CloudOff" Color="Color.Warning" Size="Size.Small" Class="ml-2">
                Sin conexión
            </MudChip>
        }
    </MudText>

    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Lista de Recibos</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Add"
                          Disabled="!isOnline">
                    Nuevo Recibo
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          StartIcon="Icons.Material.Filled.CameraAlt"
                          Class="ml-2"
                          Disabled="!isOnline">
                    Escanear Recibo
                </MudButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudDataGrid Items="@receipts" Hover="true" Striped="true" Breakpoint="Breakpoint.Sm">
                <Columns>
                    <PropertyColumn Property="x => x.Date" Title="Fecha" Format="dd/MM/yyyy" />
                    <PropertyColumn Property="x => x.Store" Title="Tienda" />
                    <PropertyColumn Property="x => x.Total" Title="Total" Format="C" />
                    <PropertyColumn Property="x => x.ItemCount" Title="Artículos" />
                    <TemplateColumn Title="Estado">
                        <CellTemplate>
                            @if (context.Item.IsProcessed)
                            {
                                <MudChip T="string" Icon="Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small">
                                    Procesado
                                </MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Icon="Icons.Material.Filled.Schedule" Color="Color.Warning" Size="Size.Small">
                                    Pendiente
                                </MudChip>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Acciones" CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" 
                                         Icon="Icons.Material.Outlined.Visibility" 
                                         Color="Color.Info" 
                                         Title="Ver detalles" />
                            <MudIconButton Size="@Size.Small" 
                                         Icon="Icons.Material.Outlined.Edit" 
                                         Color="Color.Primary" 
                                         Disabled="!isOnline"
                                         Title="Editar" />
                            <MudIconButton Size="@Size.Small" 
                                         Icon="Icons.Material.Outlined.Delete" 
                                         Color="Color.Secondary"
                                         Disabled="!isOnline"
                                         Title="Eliminar" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudCardContent>
    </MudCard>

    @if (!isOnline)
    {
        <MudAlert Severity="Severity.Warning" Class="mt-4">
            <MudText>
                <MudIcon Icon="Icons.Material.Filled.Info" Class="mr-1" />
                Actualmente estás sin conexión. No puedes crear nuevos recibos o usar la función de escaneo.
                Los recibos mostrados son los últimos datos sincronizados.
            </MudText>
        </MudAlert>
    }

    <MudPaper Class="mt-4 pa-4">
        <MudText Typo="Typo.h6" Class="mb-3">Resumen</MudText>
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudPaper Class="pa-4 text-center">
                    <MudIcon Icon="Icons.Material.Filled.Receipt" Size="Size.Large" Color="Color.Primary" />
                    <MudText Typo="Typo.h4">@receipts.Count</MudText>
                    <MudText Typo="Typo.body2">Total de Recibos</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudPaper Class="pa-4 text-center">
                    <MudIcon Icon="Icons.Material.Filled.Euro" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h4">@receipts.Sum(r => r.Total).ToString("C")</MudText>
                    <MudText Typo="Typo.body2">Gasto Total</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudPaper Class="pa-4 text-center">
                    <MudIcon Icon="Icons.Material.Filled.TrendingUp" Size="Size.Large" Color="Color.Tertiary" />
                    <MudText Typo="Typo.h4">@(receipts.Any() ? (receipts.Sum(r => r.Total) / receipts.Count).ToString("C") : "0")</MudText>
                    <MudText Typo="Typo.body2">Promedio por Compra</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<ReceiptModel> receipts = new();
    private bool isOnline = true;

    protected override async Task OnInitializedAsync()
    {
        // Initialize network service
        if (NetworkService is NetworkStatusService networkService)
        {
            await networkService.InitializeAsync();
        }
        
        // Subscribe to network changes
        NetworkService.NetworkStatusChanged += OnNetworkStatusChanged;
        
        // Get initial network status
        isOnline = await NetworkService.IsOnlineAsync();
        
        // Load receipts (simulated data for demo)
        await LoadReceipts();
    }

    private async Task LoadReceipts()
    {
        // Simular datos para demostración - en una app real vendría de la API/base de datos
        receipts = new List<ReceiptModel>
        {
            new() { Id = 1, Date = DateTime.Now.AddDays(-1), Store = "Mercadona", Total = 45.67m, ItemCount = 12, IsProcessed = true },
            new() { Id = 2, Date = DateTime.Now.AddDays(-3), Store = "Carrefour", Total = 78.92m, ItemCount = 18, IsProcessed = true },
            new() { Id = 3, Date = DateTime.Now.AddDays(-5), Store = "Día", Total = 23.45m, ItemCount = 7, IsProcessed = false },
            new() { Id = 4, Date = DateTime.Now.AddDays(-7), Store = "El Corte Inglés", Total = 156.78m, ItemCount = 25, IsProcessed = true },
            new() { Id = 5, Date = DateTime.Now.AddDays(-10), Store = "Lidl", Total = 34.56m, ItemCount = 9, IsProcessed = true },
        };

        await Task.CompletedTask;
    }

    private void OnNetworkStatusChanged(bool online)
    {
        isOnline = online;
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        NetworkService.NetworkStatusChanged -= OnNetworkStatusChanged;
        if (NetworkService is IAsyncDisposable disposable)
        {
            await disposable.DisposeAsync();
        }
    }

    public class ReceiptModel
    {
        public int Id { get; set; }
        public DateTime Date { get; set; }
        public string Store { get; set; } = string.Empty;
        public decimal Total { get; set; }
        public int ItemCount { get; set; }
        public bool IsProcessed { get; set; }
    }
}
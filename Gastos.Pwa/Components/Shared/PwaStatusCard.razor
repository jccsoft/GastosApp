@using Gastos.Pwa.Shared.Services
@inject PwaUpdateService PwaUpdateService
@inject PwaService PwaService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@implements IDisposable

<MudCard Class="mb-4">
    <MudCardContent>
        <div class="d-flex align-items-center justify-content-between mb-3">
            <MudText Typo="Typo.h6">Estado de la Aplicación PWA</MudText>
            <MudChip T="string" Color="@GetStatusColor()" Variant="Variant.Filled" Size="Size.Small">
                @GetStatusText()
            </MudChip>
        </div>

        <div class="mb-3">
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4 text-center" Elevation="2">
                        <MudIcon Icon="@Icons.Material.Filled.GetApp" Color="Color.Primary" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Color="Color.Primary">@(isInstalled ? "Sí" : "No")</MudText>
                        <MudText Typo="Typo.caption">Instalada</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4 text-center" Elevation="2">
                        <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Secondary" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Color="Color.Secondary">@(isStandalone ? "Sí" : "No")</MudText>
                        <MudText Typo="Typo.caption">Modo Independiente</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4 text-center" Elevation="2">
                        <MudIcon Icon="@Icons.Material.Filled.Update" Color="Color.Success" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Color="Color.Success">@updateCheckCount.ToString()</MudText>
                        <MudText Typo="Typo.caption">Verificaciones</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4 text-center" Elevation="2">
                        <MudIcon Icon="@Icons.Material.Filled.Schedule" Color="Color.Info" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6" Color="Color.Info">@(lastUpdateCheck?.ToString("HH:mm") ?? "Nunca")</MudText>
                        <MudText Typo="Typo.caption">Última verificación</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </div>

        <div class="d-flex gap-2 flex-wrap">
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary"
                      StartIcon="@Icons.Material.Filled.Refresh"
                      OnClick="CheckForUpdates"
                      Disabled="isCheckingUpdates">
                @if (isCheckingUpdates)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-1" />
                    <span>Verificando...</span>
                }
                else
                {
                    <span>Verificar Actualizaciones</span>
                }
            </MudButton>

            @if (!isStandalone && canInstall)
            {
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary"
                          StartIcon="@Icons.Material.Filled.GetApp"
                          OnClick="ShowInstallPrompt">
                    Instalar App
                </MudButton>
            }

            <MudButton Variant="Variant.Text" 
                      Color="Color.Info"
                      StartIcon="@Icons.Material.Filled.Info"
                      OnClick="ShowAppInfo">
                Información
            </MudButton>
        </div>

        @if (showDetails)
        {
            <MudDivider Class="my-3" />
            <MudText Typo="Typo.body2" Class="mb-2">
                <strong>Detalles técnicos:</strong>
            </MudText>
            <MudList T="string" Dense="true">
                <MudListItem T="string" Icon="@Icons.Material.Filled.Computer" Text="@($"User Agent: {userAgent}")" />
                <MudListItem T="string" Icon="@Icons.Material.Filled.Language" Text="@($"URL actual: {currentUrl}")" />
                <MudListItem T="string" Icon="@Icons.Material.Filled.Memory" Text="@($"Service Worker: {(hasServiceWorker ? "Soportado" : "No soportado")}")" />
                <MudListItem T="string" Icon="@Icons.Material.Filled.Storage" Text="@($"Cache API: {(hasCacheApi ? "Disponible" : "No disponible")}")" />
            </MudList>
        }
    </MudCardContent>
</MudCard>

@code {
    private bool isInstalled = false;
    private bool isStandalone = false;
    private bool canInstall = false;
    private bool isCheckingUpdates = false;
    private bool showDetails = false;
    private int updateCheckCount = 0;
    private DateTime? lastUpdateCheck;
    
    private string userAgent = "";
    private string currentUrl = "";
    private bool hasServiceWorker = false;
    private bool hasCacheApi = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadPwaStatus();
            await LoadTechnicalDetails();
            
            // Suscribirse a eventos de actualización
            PwaUpdateService.UpdateAvailable += OnUpdateEvent;
            PwaUpdateService.UpdateInstalled += OnUpdateEvent;
            PwaUpdateService.UpdateReady += OnUpdateEvent;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing PWA settings: {ex.Message}");
        }
    }

    private async Task LoadPwaStatus()
    {
        isInstalled = await PwaService.IsInstalledAsync();
        isStandalone = await PwaService.IsStandaloneAsync();
        canInstall = await PwaService.CanInstallAsync();
    }

    private async Task LoadTechnicalDetails()
    {
        try
        {
            userAgent = await JSRuntime.InvokeAsync<string>("eval", "navigator.userAgent");
            currentUrl = await JSRuntime.InvokeAsync<string>("eval", "window.location.href");
            hasServiceWorker = await JSRuntime.InvokeAsync<bool>("eval", "'serviceWorker' in navigator");
            hasCacheApi = await JSRuntime.InvokeAsync<bool>("eval", "'caches' in window");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading technical details: {ex.Message}");
        }
    }

    private async Task CheckForUpdates()
    {
        isCheckingUpdates = true;
        StateHasChanged();
        
        try
        {
            bool found = await PwaUpdateService.CheckForUpdatesAsync();
            updateCheckCount++;
            lastUpdateCheck = DateTime.Now;
            
            if (found)
            {
                Snackbar.Add("Verificación de actualización completada", Severity.Info);
            }
            else
            {
                Snackbar.Add("No se encontraron actualizaciones", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking for updates: {ex.Message}");
            Snackbar.Add("Error al verificar actualizaciones", Severity.Error);
        }
        finally
        {
            isCheckingUpdates = false;
            StateHasChanged();
        }
    }

    private async Task ShowInstallPrompt()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window.deferredPrompt) {
                    window.deferredPrompt.prompt();
                    window.deferredPrompt.userChoice.then((choiceResult) => {
                        if (choiceResult.outcome === 'accepted') {
                            console.log('User accepted the install prompt');
                        } else {
                            console.log('User dismissed the install prompt');
                        }
                        window.deferredPrompt = null;
                    });
                }
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing install prompt: {ex.Message}");
            Snackbar.Add("No se puede mostrar el diálogo de instalación", Severity.Warning);
        }
    }

    private void ShowAppInfo()
    {
        showDetails = !showDetails;
        StateHasChanged();
    }

    private async Task OnUpdateEvent()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private Color GetStatusColor()
    {
        if (isStandalone) return Color.Success;
        if (isInstalled) return Color.Info;
        return Color.Default;
    }

    private string GetStatusText()
    {
        if (isStandalone) return "Ejecutándose como PWA";
        if (isInstalled) return "Instalada";
        return "Navegador Web";
    }

    public void Dispose()
    {
        if (PwaUpdateService != null)
        {
            PwaUpdateService.UpdateAvailable -= OnUpdateEvent;
            PwaUpdateService.UpdateInstalled -= OnUpdateEvent;
            PwaUpdateService.UpdateReady -= OnUpdateEvent;
        }
    }
}
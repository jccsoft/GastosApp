@implements IDisposable
@inject PwaUpdateService PwaUpdateService

@code {

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await PwaUpdateService.InitializeAsync();

            PwaUpdateService.UpdateAvailable += OnUpdateEvent;
            PwaUpdateService.UpdateInstalled += OnUpdateEvent;
            PwaUpdateService.UpdateReady += OnUpdateEvent;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing PWA settings: {ex.Message}");
        }
    }

    private async Task OnUpdateEvent()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        if (PwaUpdateService != null)
        {
            PwaUpdateService.UpdateAvailable -= OnUpdateEvent;
            PwaUpdateService.UpdateInstalled -= OnUpdateEvent;
            PwaUpdateService.UpdateReady -= OnUpdateEvent;
        }
    }
}

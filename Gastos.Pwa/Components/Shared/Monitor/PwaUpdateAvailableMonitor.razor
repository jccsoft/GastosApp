@inject IJSRuntime _jsRuntime
@inject ISnackbar Snackbar
@inject LocalizationService Loc

@code {
    protected override async Task OnInitializedAsync()
    {
        await RegisterForUpdateAvailableNotification();
    }

    private async Task RegisterForUpdateAvailableNotification()
    {        
        // Usar el sistema pwa-updater más robusto
        await _jsRuntime.InvokeVoidAsync("pwaUpdater.initialize", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void OnUpdateAvailable()
    {
        ShowUpdateNotification();
    }

    [JSInvokable]
    public void OnUpdateReady()
    {
        ShowUpdateNotification();
    }

    [JSInvokable]
    public void OnUpdateInstalled()
    {
        // Opcional: mostrar notificación de instalación exitosa
    }

    private void ShowUpdateNotification()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;

        Snackbar.Add(new MarkupString($"<center><p class='p-0 m-0'>{Loc.Get(RS.PwaUpdateNewVersionAvailable)}.</p><p class='p-0 m-0'>{Loc.Get(RS.PwaUpdateClickToUpdate)}.</p></center>"),
            Severity.Warning,
            config =>
            {
                config.RequireInteraction = true;
                config.ShowCloseIcon = true;
                config.HideIcon = true;
                config.OnClick = snackbar =>
                {
                    // Usar el método más robusto del pwa-updater
                    _jsRuntime.InvokeVoidAsync("pwaUpdater.skipWaiting");
                    StateHasChanged();
                    return Task.CompletedTask;
                };
            });
    }
}
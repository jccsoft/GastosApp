@implements IDisposable

@inject IDocIntelApi DocIntelApi
@inject IReceiptApi ReceiptApi
@inject ISnackbar Snackbar
@inject StateContainer StateContainer
@inject BlazorService BlazorService
@inject LocalizationService Loc


@if (!string.IsNullOrEmpty(_errorMessage))
{
    <Alert Message="@_errorMessage" />
}
else if(_analysisJobs is null)
{
    <Loading Class="mt-4" />
}
else if (_analysisJobs.ItemsCount == 0)
{
    <MudText Typo="Typo.body1" Class="mt-4">@Loc.Get(RS.ErrorNoPendingReceipts)</MudText>
}
else
{
    <MudStack Row Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h6">@($"{Loc.Get(RS.PendingReceipts)}:")</MudText>
        <MudIconButton Variant="Variant.Filled" OnClick="FetchPendingAnalysisJobsAsync" Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" />
    </MudStack>


    <MudGrid Class="mt-5" Spacing="2">
        @foreach (var job in _analysisJobs.Items.OrderBy(j => j.CreatedAtUtc))
        {
            <MudItem xs="12" sm="4">
                <AnalysisJobCard Job="@job"
                                 OnCreateClick="(() => OpenCreateReceiptDialogAsync(job.Id, job.DocumentId, job.FileName))"
                                 OnDeleteClick="() => DeleteAnalysisJobAsync(job.Id, job.FileName)" />
            </MudItem>
        }
    </MudGrid>
}


@code {
    private PendingJobCollection? _analysisJobs;

    private string? _errorMessage;

    private System.Timers.Timer? _refreshTimer;
    private const int _refreshIntervalMilliseconds = 300;

    protected override void OnInitialized()  
    {    
        StateContainer.AnalysisJobCreated += OnAnalysisJobCreated;  
        StateContainer.BreakpointChanged += OnBreakpointChanged;

        _refreshTimer = new System.Timers.Timer(_refreshIntervalMilliseconds);
        _refreshTimer.Elapsed += TimerElapsed;  
    }  

    protected override async Task OnInitializedAsync()
    {      
        await FetchPendingAnalysisJobsAsync();
    }

    private async Task FetchPendingAnalysisJobsAsync()
    {
        _refreshTimer?.Stop();

        _analysisJobs = null;
        GetAllAnalysisJobsRequest request = new() { Page = 1, PageSize = 100 };

        try
        {
            var responseGetAll = await DocIntelApi.GetAllAnalysisJobsAsync(request);

            if (responseGetAll.IsSuccessStatusCode && responseGetAll.Content is AnalysisJobCollectionResponse collectionResponse)
            {
                _analysisJobs = GetPendingJobCollection(collectionResponse);
            }
            else
            {
                _errorMessage = BlazorService.GetResponseError(responseGetAll);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = BlazorService.GetResponseError(ex);
        }

        StateHasChanged();

        await CheckAnalysisJobsStatus();

        _refreshTimer?.Start();
    }

    private async Task CheckAnalysisJobsStatus()
    {
        if (_analysisJobs is null) return;

        foreach (var job in _analysisJobs.Items.Where(j=> j.CheckPending).OrderBy(j => j.CreatedAtUtc))
        {
            var response = await DocIntelApi.GetAnalysisJobByIdAsync(job.Id);
            if (!(response.IsSuccessStatusCode && response.Content is AnalysisJobResponse remoteJob)) continue;

            job.Status = remoteJob.Status;
            job.CompletedAtUtc = remoteJob.CompletedAtUtc;

            if (!(remoteJob.IsSuccessful && remoteJob.DocumentId is not null)) continue;

            job.DocumentId = remoteJob.DocumentId;

            var responseReceipt = await DocIntelApi.GetReceiptByIdAsync((Guid)remoteJob.DocumentId);
            if (responseReceipt.IsSuccessStatusCode && responseReceipt.Content is ReceiptResponse receiptResponse)
            {
                job.ReceiptMerchant = receiptResponse.Merchant.GetFirstWord().ToUpper();
                job.ReceiptTransactionDate = receiptResponse.TransactionDateUtc;

                if (!string.IsNullOrEmpty(receiptResponse.Merchant) && receiptResponse.TransactionDateUtc is not null)
                {
                    if (_analysisJobs.Items.Any(j =>
                        j.CreatedAtUtc <= job.CreatedAtUtc && 
                        j.Id != job.Id &&
                        j.ReceiptMerchant.GetFirstWord().ToUpper() == job.ReceiptMerchant &&
                        j.ReceiptTransactionDate == job.ReceiptTransactionDate))
                    {
                        job.IsReceiptAlreadyPending = true;
                    }
                    else
                    {
                        var responseExists = await ReceiptApi.ExistsByStoreSourceNameAndDate(
                            receiptResponse.Merchant!,
                            (DateTime)receiptResponse.TransactionDateUtc);

                        job.IsReceiptAlreadyCreated = responseExists.IsSuccessStatusCode && responseExists.Content;
                    }                                
                }
            }

            if(string.IsNullOrEmpty(job.ReceiptMerchant)) 
                job.ReceiptMerchant = $"{Loc.Get(RS.EntityStore)}: ?";                        

            StateHasChanged();
        }
    }

    private async void TimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        _refreshTimer?.Stop();

        if (_analysisJobs is not null &&
            _analysisJobs.Items.Any(i =>
                i.Status == (int)AnalysisJobStatusResponse.Pending ||
                i.Status == (int)AnalysisJobStatusResponse.InProgress))
        {
            await InvokeAsync(async () => await CheckAnalysisJobsStatus());

            _refreshTimer?.Start();
        }
    }


    #region ACTIONS
    private async Task OpenCreateReceiptDialogAsync(Guid analysisJobId, Guid? receiptId, string fileName)
    {
        if(!receiptId.HasValue || receiptId == Guid.Empty)
        {
            Snackbar.Add(Loc.Get(RS.ErrorNoReceiptFoundForAnalysisJob), Severity.Error);
            return;
        }

        var result = await BlazorService.OpenCreateReceiptDialogAsync(receiptId, fileName);
        if (result is not null && !result.Canceled)
        {
            StateHasChanged();

            await DocIntelApi.DeleteAnalysisJobAsync(analysisJobId);

            await FetchPendingAnalysisJobsAsync();
        }
    }

    private async Task DeleteAnalysisJobAsync(Guid jobId, string fileName)
    {
        bool confirmedDeletion = await BlazorService.ConfirmDeletionAsync(
            string.Format(Loc.Get(RS.AskDeleteAnalysisJob0), fileName));

        if (confirmedDeletion)
        {
            var response = await DocIntelApi.DeleteAnalysisJobAsync(jobId);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add(Loc.Get(RS.SuccessDelete), Severity.Success);
                await FetchPendingAnalysisJobsAsync();
            }
            else
            {
                BlazorService.ShowResponseError(response);
            }
        }
    }

    private async void OnAnalysisJobCreated(List<Guid> jobIds)
    {
        await FetchPendingAnalysisJobsAsync();
    }
    #endregion


    private void OnBreakpointChanged() => StateHasChanged();

    void IDisposable.Dispose()
    {
        StateContainer.AnalysisJobCreated -= OnAnalysisJobCreated;
        StateContainer.BreakpointChanged -= OnBreakpointChanged;

        _refreshTimer?.Dispose();
    } 



    private PendingJobCollection GetPendingJobCollection(AnalysisJobCollectionResponse analysisJobCollectionResponse)
    {
        return new PendingJobCollection
        {
            Items = analysisJobCollectionResponse.Items
                .Select(item => new PendingAnalysisJob
                {
                    Id = item.Id,
                    FileName = item.FileName,
                    CreatedAtUtc = item.CreatedAtUtc,
                    CompletedAtUtc = item.CompletedAtUtc,
                    DocumentId = item.DocumentId,
                    Status = item.Status,
                    Errors = item.Errors
                }).ToList(),
            ItemsCount = analysisJobCollectionResponse.ItemsCount,
            Page = analysisJobCollectionResponse.Page,
            PageSize = analysisJobCollectionResponse.PageSize
        };
    }
}

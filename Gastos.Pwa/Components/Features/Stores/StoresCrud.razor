@inject IStoreApi StoreApi
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject StateContainer StateContainer
@inject BlazorService BlazorService
@inject LocalizationService Loc
@inject AuthenticationStateProvider provider


<Alert Message="@_errorMessage" />

<TableCrud TEntity="StoreDto" @ref="_table" ServerReload="ServerReload" Columns="@_columns"
                 SearchStringValue="@_parameters.SearchString" OnSearchStringChanged="OnSearch"
                 OnAddClick="OpenAddStoreDialogAsync"
                 @bind-AllowRemoveValue="@_allowRemove"
                 @bind-SelectedEntityId="@_selectedStoreId"
                 RowClickText="">

    <RowTemplate>
        <MudTd DataLabel="@Loc.Get(RS.EntityProduct)">@context.Name</MudTd>
        <MudTd DataLabel="@Loc.Get(RS.FieldReceiptDescription)">@context.SourceName.FirstCharToUpper()</MudTd>
        <MudTd DataLabel="@Loc.Get(RS.FieldActions)">
            <MyButton Type="IconEdit" OnClick="() => OpenEditStoreDialogAsync(context)" />
            <MyButton Type="IconDelete" OnClick="() => DeleteStoreAsync(context)" Hidden="@(!_allowRemove)" />
        </MudTd>
    </RowTemplate>
</TableCrud>

@code {
    private TableCrud<StoreDto>? _table;
    private StoreParameters _parameters => StateContainer.StoreParams;
    private string _errorMessage = "";
    private bool _allowRemove = false;
    private Guid _selectedStoreId = Guid.Empty;
    private string[] _columns = null!;
    private string _currentUserId = "";

    protected override void OnInitialized()
    {
        _columns = new[] { "", Loc.Get(RS.FieldReceiptDescription), "" };
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await provider.GetAuthenticationStateAsync();
        _currentUserId = authState.User.GetUserId();
    }

    private async Task<TableData<StoreDto>> ServerReload(TableState state, CancellationToken token)
    {
        _errorMessage = "";        
        TableData<StoreDto> output = new();
        _parameters.UpdatePageInfo(state.Page, state.PageSize);

        try
        {
            var response = await StoreApi.GetAllAsync(_parameters, token);
            if (response.IsSuccessStatusCode && response.Content is ApiPagedResponse<StoreDto> pagedResponse)
            {
                if (pagedResponse.UserId != _currentUserId)
                {
                    _errorMessage = Loc.Get(RS.ErrorUserMismatch);
                }
                else
                {
                    output.Items = pagedResponse.Items;
                    output.TotalItems = pagedResponse.TotalItems;
                }
            }
            else
            {
                _errorMessage = BlazorService.GetResponseError(response);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = BlazorService.GetResponseError(ex);
        }

        StateHasChanged();

        return output;
    }

    private async Task OpenAddStoreDialogAsync()
    {
        var result = await BlazorService.OpenAddStoreDialogAsync();
        if (result is not null && !result.Canceled)
        {
            await _table!.ReloadServerDataAsync();
        }
    }

    private async Task OpenEditStoreDialogAsync(StoreDto store)
    {
        var result = await BlazorService.OpenEditStoreDialogAsync(store.Id);
        if (result is not null && !result.Canceled)
        {
            await _table!.ReloadServerDataAsync();
        }
    }

    private async Task DeleteStoreAsync(StoreDto store)
    {
        bool confirmedDeletion = await BlazorService.ConfirmDeletionAsync(
            string.Format(Loc.Get(RS.AskDelete0), store.Name));

        if (confirmedDeletion)
        {
            var response = await StoreApi.DeleteAsync(store.Id);
            if (response.IsSuccessStatusCode)
            {
                _allowRemove = false;
                Snackbar.Add(Loc.Get(RS.SuccessDelete), Severity.Success);
                await _table!.ReloadServerDataAsync();
            }
            else
            {
                BlazorService.ShowResponseError(response);
            }
        }
    }

    private async Task OnSearch(string searchString)
    {
        _parameters.SearchString = searchString;
        await _table!.ReloadServerDataAsync();
    }

}

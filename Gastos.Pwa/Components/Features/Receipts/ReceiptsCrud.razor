@using System.Security.Claims
@implements IDisposable
@inject IReceiptApi ReceiptApi
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject StateContainer StateContainer
@inject BlazorService BlazorService
@inject NavigationManager NavigationManager
@inject LocalizationService Loc
@inject AuthenticationStateProvider provider


<Alert Message="@_errorMessage" />

<TableCrud TEntity="ReceiptDto" @ref="_table" ServerReload="ServerReload" Columns="@_columns"
                 SearchStringValue="@_parameters.ProductName" OnSearchStringChanged="OnSearchChanged"
                 OnAddClick="NavigateToTicketReading"
                 @bind-AllowRemoveValue="@_allowRemove"
                 @bind-SelectedEntityId="@_selectedReceiptId"
                 RowClickText="@Loc.Get(RS.RowClickReceipt)"
                 PageSizeOptions="new int[] { 2, 25, 50, 100, int.MaxValue }"
                 ShowDateRange="true"
                 FromDate="@_localDateStart" DateStartChanged="OnDateStartChanged"
                 ToDate="@_localDateEnd" DateEndChanged="OnDateEndChanged">
    <RowTemplate>
        <MudTd DataLabel="@Loc.Get(RS.FieldDate)">@context.TransactionDateUtc.ToLocalTimeShort()</MudTd>
        <MudTd DataLabel="@Loc.Get(RS.EntityStore)">@context.Store?.Name</MudTd>
        <MudTd DataLabel="@Loc.Get(RS.FieldAmount)">@context.Items.Sum(i => i.Amount).ToStringAmount()</MudTd>
        <MudTd DataLabel="@Loc.Get(RS.FieldActions)">
            <TableButton Action="@TableAction.Edit" OnClick="() => OpenEditDialogAsync(context)" />
            <TableButton Action="@TableAction.Info" OnClick="() => ShowReceiptInfo(context)" Hidden="@(!_allowRemove)" />
            <TableButton Action="@TableAction.Delete" OnClick="() => DeleteReceiptAsync(context)" Hidden="@(!_allowRemove)" />
        </MudTd>
    </RowTemplate>

    <ChildRowContent>
        @if (context.Id == _selectedReceiptId || !string.IsNullOrEmpty(_parameters.ProductName))
        {
            <MudTr Class="row-detail">
                @if (StateContainer.IsNotMobile)
                {
                    <MudTd></MudTd>
                }
                <MudTd colspan="@(StateContainer.IsMobile ? 4 : 3)" Class="cell-detail">
                    <MudPaper Elevation="3" Style="">
                        <ReceiptItems Items="context.Items" SearchProductName="@_parameters.ProductName" />
                    </MudPaper>
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
</TableCrud>  

@code {
    private TableCrud<ReceiptDto>? _table;
    private ReceiptParameters _parameters => StateContainer.ReceiptParams;
    private DateTime? _localDateStart, _localDateEnd;

    private string _errorMessage = "";
    private bool _allowRemove = false;
    private Guid _selectedReceiptId = Guid.Empty;
    private string[] _columns = null!;
    private string _currentUserId = "";

    protected override void OnInitialized()
    {
        StateContainer.BreakpointChanged += OnBreakpointChanged;
        _columns = new[] { "", "", Loc.Get(RS.FieldAmount), "" };
        _localDateStart = _parameters.FromDateUtc.ToLocalTime();
        _localDateEnd = _parameters.ToDateUtc.ToLocalTime();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await provider.GetAuthenticationStateAsync();        
        _currentUserId = authState.User.GetUserId();
    }

    private async Task<TableData<ReceiptDto>> ServerReload(TableState state, CancellationToken token)
    {
        _errorMessage = "";
        TableData<ReceiptDto> output = new();
        _parameters.UpdatePageInfo(state.Page, state.PageSize);

        try
        {
            // Log detallado de la llamada
            Console.WriteLine($"🔍 Calling ReceiptApi.GetAllAsync with parameters:");
            Console.WriteLine($"   ProductName: '{_parameters.ProductName}'");
            Console.WriteLine($"   Page: {_parameters.Page}");
            Console.WriteLine($"   PageSize: {_parameters.PageSize}");
            Console.WriteLine($"   FromDateUtc: {_parameters.FromDateUtc}");
            Console.WriteLine($"   ToDateUtc: {_parameters.ToDateUtc}");

            var response = await ReceiptApi.GetAllAsync(_parameters, token);
            
            // DIAGNÓSTICO DETALLADO
            Console.WriteLine($"🔍 Response Status: {response.StatusCode}");
            Console.WriteLine($"🔍 Response IsSuccess: {response.IsSuccessStatusCode}");
            Console.WriteLine($"🔍 Response.Content is null: {response.Content is null}");
            
            // Verificar si hay error
            if (response.Error != null)
            {
                Console.WriteLine($"🔍 Response Error exists");
                Console.WriteLine($"🔍 Response Error Status: {response.Error.StatusCode}");
                Console.WriteLine($"🔍 Response Error Reason: '{response.Error.ReasonPhrase}'");
                
                var errorContent = response.Error.Content;
                Console.WriteLine($"🔍 Response Error Content: '{errorContent}'");
                Console.WriteLine($"🔍 Response Error Content Length: {errorContent?.Length ?? 0}");
                
                // Verificar si el contenido de error es HTML (típico de Azure errors)
                if (!string.IsNullOrEmpty(errorContent))
                {
                    var isHtml = errorContent.TrimStart().StartsWith("<", StringComparison.OrdinalIgnoreCase);
                    Console.WriteLine($"🔍 Error content appears to be HTML: {isHtml}");
                    
                    if (isHtml)
                    {
                        Console.WriteLine("🔍 HTML Error detected - likely Azure routing/authentication issue");
                    }
                }
            }

            // Verificar headers si están disponibles
            if (response.Headers != null)
            {
                Console.WriteLine("🔍 Response Headers:");
                foreach (var header in response.Headers)
                {
                    Console.WriteLine($"   {header.Key}: {string.Join(", ", header.Value)}");
                }
            }

            if (response.IsSuccessStatusCode && response.Content is ApiPagedResponse<ReceiptDto> pagedResponse)
            {
                Console.WriteLine($"🔍 Success: Content deserialized successfully with {pagedResponse.Items.Count} items");
                
                if(pagedResponse.UserId != _currentUserId)
                {
                    _errorMessage = Loc.Get(RS.ErrorUserMismatch);
                    Console.WriteLine($"🔍 User mismatch: Expected {_currentUserId}, got {pagedResponse.UserId}");
                }
                else
                {
                    output.Items = pagedResponse.Items;
                    output.TotalItems = pagedResponse.TotalItems;                
                }
            }
            else
            {
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("🔍 Response was successful (200) but Content is null - JSON deserialization failed");
                    Console.WriteLine("🔍 This typically means the response body was empty or contained invalid JSON");
                }
                else
                {
                    Console.WriteLine($"🔍 Response was not successful: {response.StatusCode}");
                }
                
                _errorMessage = BlazorService.GetResponseError(response);
                Console.WriteLine($"🔍 Final error message: {_errorMessage}");
            }
        }
        catch (TaskCanceledException tex)
        {
            Console.WriteLine($"🔍 Request was cancelled/timeout: {tex.Message}");
            _errorMessage = "La solicitud tardó demasiado tiempo. Verifica tu conexión.";
        }
        catch (HttpRequestException hex)
        {
            Console.WriteLine($"🔍 HTTP request failed: {hex.Message}");
            _errorMessage = $"Error de conexión: {hex.Message}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"🔍 Unexpected exception: {ex}");
            _errorMessage = $"Error inesperado: {ex.Message}";
        }

        StateHasChanged();
        return output;
    }

    private void NavigateToTicketReading()
    {
        NavigationManager.NavigateTo("/receipts-reader");
    }

    private async Task OpenEditDialogAsync(ReceiptDto Receipt)
    {
        var result = await BlazorService.OpenEditReceiptDialogAsync(Receipt.Id);
        if (result is not null && !result.Canceled)
        {
            await _table!.ReloadServerDataAsync();
        }
    }

    private async Task DeleteReceiptAsync(ReceiptDto Receipt)
    {
        bool confirmedDeletion = await BlazorService.ConfirmDeletionAsync(
            string.Format(Loc.Get(RS.AskDelete0), Loc.Get(RS.EntityReceipt)));

        if (confirmedDeletion)
        {
            var response = await ReceiptApi.DeleteAsync(Receipt.Id);
            if (response.IsSuccessStatusCode)
            {
                _allowRemove = false;
                Snackbar.Add(Loc.Get(RS.SuccessDelete), Severity.Success);
                await _table!.ReloadServerDataAsync();
            }
            else
            {
                BlazorService.ShowResponseError(response);
            }
        }
    }

    private async Task OnSearchChanged(string searchString)
    {
        _parameters.ProductName = searchString;
        await _table!.ReloadServerDataAsync();
    }

    private async Task OnDateStartChanged(DateTime? value)
    {
        _localDateStart = value;
        _parameters.FromDateUtc = value.ToUniversalTime();

        await _table!.ReloadServerDataAsync();
    }

    private async Task OnDateEndChanged(DateTime? value)
    {
        _localDateEnd = value;

        _parameters.ToDateUtc = value is null ?
            null : 
            ((DateTime)value).AddDays(1).AddSeconds(-1).ToUniversalTime();

        await _table!.ReloadServerDataAsync();
    }


    private async Task ShowReceiptInfo(ReceiptDto receipt)
    {
        await BlazorService.OpenInfoReceiptDialogAsync(receipt);
    }


    private void OnBreakpointChanged() => StateHasChanged();

    void IDisposable.Dispose()
    {
        StateContainer.BreakpointChanged -= OnBreakpointChanged;
    }
}

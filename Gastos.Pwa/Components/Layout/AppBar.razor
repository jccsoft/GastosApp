@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation


@implements IDisposable
@inject StateContainer StateContainer
@inject LocalizationService Loc

<MudAppBar Elevation="3" Dense>
    @if (StateContainer.IsMobile)
    {
        <Menu MenuType="superior" />
    }
    <MudText Typo="@(StateContainer.IsMobile ? Typo.body1 : Typo.h6)" Style="margin-left: 3rem;">
        @StateContainer.PageTitle
    </MudText>
    <MudSpacer />
    <AuthorizeView>
        <Authorized>
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudText Typo="Typo.subtitle1" Class="mr-2">
                    @context.User.GetUserName()
                </MudText>
            </MudHidden>
            <MudTooltip Text="@Loc.Get(RS.ActLogout)">
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="BeginLogout" />
            </MudTooltip>
        </Authorized>
        <NotAuthorized>
            <MudChip T="string" Color="Color.Warning" Variant="Variant.Outlined" Size="@(StateContainer.IsMobile ? Size.Small: Size.Medium)">
                @if (StateContainer.IsMobile)
                {
                    @Loc.Get(RS.DemoModeMessage1)
                }
                else
                {
                    @(string.Format($"{Loc.Get(RS.DemoModeMessage1)}. {Loc.Get(RS.DemoModeMessage2)}"))
                }                
            </MudChip>
            <MudSpacer />       
            <MudTooltip Text="@Loc.Get(RS.ActLogin)">
                <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Inherit" Href="authentication/login" />
            </MudTooltip>
        </NotAuthorized>
    </AuthorizeView>

    <ConfigSelector />

</MudAppBar>

@code {
    protected override void OnInitialized()
    {
        StateContainer.PageTitleChanged += OnPageTitleChanged;
        StateContainer.BreakpointChanged += OnBreakpointChanged;
    }

    private void OnPageTitleChanged() => StateHasChanged();
    private void OnBreakpointChanged() => StateHasChanged();

    public void Dispose()
    {
        StateContainer.PageTitleChanged -= OnPageTitleChanged;
        StateContainer.BreakpointChanged -= OnBreakpointChanged;
    }

    private static bool IsDebug
    {
        get
        {
#if DEBUG
            return true;
#else
            return false;
#endif
        }
    }

    private void BeginLogout()
    {
        Navigation.NavigateToLogout("/authentication/logout");
    }
}
# Workflow simplificado para versionado manual
name: Manual Version & Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (optional, format: v1.2.3)'
        required: false
        type: string

# Permisos necesarios para crear tags y releases
permissions:
  contents: write    # Necesario para crear tags
  actions: read      # Necesario para leer el workflow

jobs:
  create-version:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Usar el token con permisos explÃ­citos
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Calculate New Version
      id: version
      run: |
        if [ -n "${{ inputs.custom_version }}" ]; then
          NEW_VERSION="${{ inputs.custom_version }}"
          if [[ ! $NEW_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Custom version must be in format v1.2.3"
            exit 1
          fi
        else
          # Obtener la Ãºltima tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Extraer nÃºmeros de versiÃ³n
          VERSION_NUM=${LAST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Aplicar bump
          case "${{ inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        fi
        
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Verificar que la tag no existe
        if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
          echo "Error: Tag $NEW_VERSION already exists"
          exit 1
        fi

    - name: Get Recent Commits
      id: commits
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --max-count=20)
        else
          COMMITS=$(git log --oneline --max-count=20)
        fi
        
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Tag and Push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configurar git con el bot de GitHub Actions
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Crear tag localmente
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        
        # Configurar la URL remota con el token
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        
        # Push del tag
        git push origin "$NEW_VERSION"
        
        echo "Created and pushed tag: $NEW_VERSION"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        name: Release ${{ steps.version.outputs.new_version }}
        draft: false
        prerelease: false
        body: |
          ðŸš€ **Release ${{ steps.version.outputs.new_version }}**
          
          Version bump: **${{ inputs.version_type }}**
          
          ## Recent changes:
          ```
          ${{ steps.commits.outputs.commits }}
          ```
          
          ---
          *This release was created manually via GitHub Actions workflow.*
        token: ${{ secrets.GITHUB_TOKEN }}